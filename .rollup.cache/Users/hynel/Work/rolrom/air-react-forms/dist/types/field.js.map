{"version":3,"file":"field.js","sourceRoot":"","sources":["../../src/types/field.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,SAAS,EAAoB,MAAM,OAAO,CAAC;AACpD,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;AAsBjC;IASC;;OAEG;IACH,eAAY,KAAa;QAAzB,iBAQC;;QAED;;;;;;WAMG;QACH,aAAQ,GAAG;;YACV,IAAI,OAAO,CAAC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAA,MAAA,MAAA,KAAI,CAAC,GAAG,0CAAE,OAAO,0CAAE,KAAK,MAAK,SAAS,EAAE;gBAClE,OAAO;aACP;YAED,MAAM,CAAC,OAAO,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAC,EAAiB;;oBAAhB,IAAI,QAAA,EAAE,SAAS,QAAA;gBACnD,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,MAAA,MAAA,KAAI,CAAC,GAAG,0CAAE,OAAO,0CAAE,KAAK,CAAC,IAAI,SAAS,CAAC;YACtE,CAAC,CAAC,CAAC;QACJ,CAAC,CAAA;QAeD;;;;;;;;WAQG;QACH,YAAO,GAAG;YACT,IAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,KAAK,IAAK,OAAA,CACrE,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CACnC,EAFqE,CAErE,EAAE,CAAC,CAAC,CAAC;YAEN,OAAO,WAAW,KAAK,CAAC,CAAC;QAC1B,CAAC,CAAA;QAtDA,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QACvB,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,EAAE,CAAC;QACnB,IAAI,CAAC,GAAG,GAAG,MAAA,KAAK,CAAC,GAAG,mCAAI,SAAS,EAAgB,CAAC;QAClD,IAAI,CAAC,IAAI,GAAG,MAAA,KAAK,CAAC,IAAI,mCAAI,QAAQ,CAAC;QACnC,IAAI,CAAC,KAAK,GAAG,MAAA,KAAK,CAAC,KAAK,mCAAI,EAAE,CAAC;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAA,KAAK,CAAC,MAAM,mCAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG;;YAAK,OAAA,uBAAM,GAAG,gBAAG,GAAG,IAAG,SAAS,OAAG;QAA9B,CAA8B,EAAE,EAAE,CAAC,CAAC;QAChH,IAAI,CAAC,YAAY,GAAG,MAAA,KAAK,CAAC,YAAY,mCAAI,EAAE,CAAC;IAC9C,CAAC;IA4BD,sBAAI,wBAAK;QATT;;;;;;;;WAQG;aACH;;YACC,OAAO,MAAA,MAAA,MAAA,IAAI,CAAC,GAAG,0CAAE,OAAO,0CAAE,KAAK,mCAAI,SAAS,CAAC;QAC9C,CAAC;;;OAAA;IAkBF,YAAC;AAAD,CAAC,AApED,IAoEC","sourcesContent":["import { createRef, MutableRefObject } from 'react';\nimport { isEmpty } from 'lodash';\n\nexport type FieldElement = HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n\ntype FieldValue = number | string | null;\n\ntype FieldErrors = { [key: string]: string | undefined }\n\ntype ValidationRules = { [key: string]: (value: FieldValue) => any }\n\nexport type ValidationResults = { [key: string]: FieldErrors }\n\nexport interface IField {\n\tid: string;\n\tname: string;\n\tref: MutableRefObject<FieldElement | undefined>;\n\trules: ValidationRules;\n\terrors: ValidationResults;\n\ttype?: string;\n\tdefaultValue?: string | number;\n}\n\nexport class Field implements IField {\n\tid: string;\n\tname: string;\n\tref: MutableRefObject<FieldElement | undefined>;\n\trules: ValidationRules;\n\terrors: ValidationResults;\n\ttype?: string;\n\tdefaultValue?: string | number;\n\n\t/**\n\t *\n\t */\n\tconstructor(field: IField) {\n\t\tthis.name = field.name;\n\t\tthis.id = field.id;\n\t\tthis.ref = field.ref ?? createRef<FieldElement>();\n\t\tthis.type = field.type ?? 'string';\n\t\tthis.rules = field.rules ?? {};\n\t\tthis.errors = field.errors ?? Object.keys(field.rules).reduce((obj, key) => ({ ...obj, [key]: undefined }), {});\n\t\tthis.defaultValue = field.defaultValue ?? '';\n\t}\n\n\t/**\n\t * @function\n\t * @name validate\n\t * @description Performs a validation check on the field, using its rules field's validators.\n\t *\n\t * @author Timothée Simon-Franza\n\t */\n\tvalidate = (): void => {\n\t\tif (isEmpty(this.rules) || this.ref?.current?.value === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tObject.entries(this.rules).forEach(([rule, validator]) => {\n\t\t\tthis.errors[rule] = validator(this.ref?.current?.value) || undefined;\n\t\t});\n\t}\n\n\t/**\n\t * @property\n\t * @name value\n\t * @description The value of the field's linked reference.\n\t *\n\t * @author Timothée Simon-Franza\n\t *\n\t * @returns {FieldValue | undefined}\n\t */\n\tget value(): FieldValue | undefined {\n\t\treturn this.ref?.current?.value ?? undefined;\n\t}\n\n\t/**\n\t * @function\n\t * @name isValid\n\t * @description Indicates if the field is valid based on its last validation check.\n\t *\n\t * @author Timothée Simon-Franza\n\t *\n\t * @returns {boolean} True if no validation error is present, false otherwise.\n\t */\n\tisValid = (): boolean => {\n\t\tconst foundErrors = Object.values(this.errors).reduce((acc, value) => (\n\t\t\tvalue !== undefined ? acc + 1 : acc\n\t\t), 0);\n\n\t\treturn foundErrors === 0;\n\t}\n}\n"]}