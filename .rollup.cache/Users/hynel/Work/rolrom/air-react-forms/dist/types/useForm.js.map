{"version":3,"file":"useForm.js","sourceRoot":"","sources":["../../src/types/useForm.ts"],"names":[],"mappings":"","sourcesContent":["import { Field, FieldElement, IField } from './field';\n\nexport type FormData = {\n\t[key: string]: number | string,\n}\n\nexport interface useFormReturnType {\n\tformContext: {\n\t\tfields: { [key: string]: Field },\n\t\tformState: { errors: FormData },\n\t\tgetFormValues: () => FormData,\n\t\tisFormValid: () => boolean,\n\t\tregister: (field: IField) => void,\n\t},\n\tregister: (field: IField) => void,\n\thandleSubmit: (callback: (formData: FormData) => void) => void,\n}\n\nexport interface FieldProps extends Omit<Field, 'ref' | 'value'> {\n\tref: (ref: FieldElement) => void,\n\tonChange?: (params?: unknown) => void,\n}\n"]}