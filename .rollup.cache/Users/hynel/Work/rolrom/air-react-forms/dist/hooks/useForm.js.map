{"version":3,"file":"useForm.js","sourceRoot":"","sources":["../../src/hooks/useForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { MutableRefObject, useCallback, useRef, useState } from 'react';\nimport { Field, FieldElement, IField, ValidationResults } from 'types/field';\nimport { FieldProps, FormData, useFormReturnType } from 'types/useForm';\n\n/**\n * @name useForm\n * @returns\n */\nconst useForm = ({ validateOnChange = false } = {}): useFormReturnType => {\n\tconst fields: MutableRefObject<{ [key: string]: Field }> = useRef({});\n\tconst formErrorsRef: MutableRefObject<{ [key: string]: ValidationResults }> = useRef({});\n\tconst [formState, setFormState] = useState({\n\t\terrors: {},\n\t});\n\n\t/**\n\t * @function\n\t * @name updateFormState\n\t * @description Updates the formState field with the latest data.\n\t *\n\t * @author Timothée Simon-Franza\n\t */\n\tconst updateFormState = useCallback(() => {\n\t\tsetFormState({ errors: formErrorsRef.current });\n\t}, []);\n\n\t/**\n\t * @function\n\t * @name validateField\n\t * @description Performs validation checks on the provided field.\n\t *\n\t * @author Timothée Simon-Franza\n\t *\n\t * @param {bool}\tshouldUpdateFormState\tIf set to true, the state will be updated after the validation process.\n\t * @param {Field}\tfield\t\t\t\t\tThe field to perform the validation check on.\n\t */\n\tconst validateField = useCallback((shouldUpdateFormState = false) => (field: Field): void => {\n\t\tif (!fields?.current?.[field.name]) {\n\t\t\treturn;\n\t\t}\n\t\tfield.validate();\n\t\tformErrorsRef.current[field.name] = field.errors;\n\n\t\tif (shouldUpdateFormState) {\n\t\t\tupdateFormState();\n\t\t}\n\t}, [updateFormState]);\n\n\t/**\n\t * @function\n\t * @name registerField\n\t * @description Registers a field's reference.\n\t *\n\t * @author Timothée Simon-Franza\n\t *\n\t * @param {Field}\t\t\tfield\tThe field to update the reference of.\n\t * @param {FieldElement}\tref\t\tThe element to update the field's reference with.\n\t */\n\tconst registerField = useCallback((field: Field, ref: FieldElement): void => {\n\t\tif (field.name) {\n\t\t\tfields.current[field.name] = field;\n\t\t\tfields.current[field.name].ref.current = ref;\n\t\t\tvalidateField(false)(field);\n\t\t}\n\t}, [fields, validateField]);\n\n\t/**\n\t * @function\n\t * @name unregisterField\n\t * @description Removes the provided field from the list of controlled fields.\n\t *\n\t * @author Timothée Simon-Franza\n\t *\n\t * @param {Field} field The field to remove.\n\t */\n\tconst unregisterField = useCallback((field: Field): void => {\n\t\tif (fields?.current?.[field.name]) {\n\t\t\tdelete fields.current[field.name];\n\t\t}\n\t}, [fields]);\n\n\t/**\n\t * @function\n\t * @name register\n\t * @description The method to pass down to a React JSX input to register it in the controlled form.\n\t *\n\t * @author Timothée Simon-Franza\n\t *\n\t * @param {IField} fieldData The data to use in order to register the field.\n\t *\n\t * @returns {FieldProps}\n\t */\n\tconst register = useCallback((fieldData: IField) => {\n\t\tconst field = fields?.current?.[fieldData.name] ?? new Field(fieldData);\n\n\t\tif (!fields?.current?.[field.name]) {\n\t\t\tfields.current[field.name] = field;\n\t\t}\n\n\t\tconst returnedProps: FieldProps = {\n\t\t\t...field,\n\t\t\tref: (ref: FieldElement) => (ref ? registerField(field, ref) : unregisterField(field)),\n\t\t};\n\n\t\tif (validateOnChange) {\n\t\t\treturnedProps.onChange = () => validateField(true)(field);\n\t\t}\n\n\t\treturn returnedProps;\n\t}, [registerField, unregisterField, validateField, validateOnChange]);\n\n\t/**\n\t * @function\n\t * @name getFormValues\n\t * @description Returns the values of all registered fields as an object.\n\t *\n\t * @author Timothée Simon-Franza\n\t *\n\t * @returns {FormData}\n\t */\n\tconst getFormValues = useCallback(() => (\n\t\tObject.values(fields.current)\n\t\t\t.filter((ref) => ref)\n\t\t\t.reduce((values, field) => ({ ...values, [field.name]: field.value }), {})\n\t), []);\n\n\t/**\n\t * @function\n\t * @name validateForm\n\t * @description Triggers a validation check on each registered element of the form.\n\t *\n\t * @author Timothée Simon-Franza\n\t */\n\tconst validateForm = useCallback(() => {\n\t\tObject.values(fields.current).forEach((field) => {\n\t\t\tvalidateField(false)(field);\n\t\t});\n\t}, [validateField]);\n\n\t/**\n\t * @function\n\t * @name isFormValid\n\t * @description Returns whether or not the form is valid.\n\t *\n\t * @author Timothée Simon-Franza\n\t *\n\t * @returns {bool} False if one or more fields are invalid. True otherwise.\n\t */\n\tconst isFormValid = useCallback(() => {\n\t\tconst invalidFields = Object.values(fields.current)\n\t\t\t.reduce((acc, field) => (\n\t\t\t\tfield.isValid() ? acc : acc + 1\n\t\t\t), 0);\n\n\t\treturn invalidFields === 0;\n\t}, []);\n\n\t/**\n\t * @function\n\t * @name handleSubmit\n\t * @description A handled method which triggers validation checks on the registered fields and calls the provided callback method if the form is valid.\n\t *\n\t * @author Timothée Simon-Franza\n\t *\n\t * @param {Function} callback The method to call if the form is valid.\n\t */\n\tconst handleSubmit = useCallback((callback: (formData: FormData) => void) => (event: React.FormEvent) => {\n\t\tevent?.preventDefault();\n\t\tvalidateForm();\n\n\t\tif (isFormValid()) {\n\t\t\tcallback(getFormValues());\n\t\t}\n\t}, [getFormValues, isFormValid, validateForm]);\n\n\treturn {\n\t\tformContext: {\n\t\t\tfields: fields.current,\n\t\t\tformState,\n\t\t\tregister,\n\t\t\tgetFormValues,\n\t\t\tisFormValid,\n\t\t},\n\t\tregister,\n\t\thandleSubmit,\n\t};\n};\n\nexport default useForm;\n"]}